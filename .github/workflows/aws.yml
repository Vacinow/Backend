on:
  push:
    branches: [ main ]

name: Release

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
  build:
    needs: tests
    name: Build
    runs-on: ubuntu-latest
    environment: production

    steps:
    
      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: vacinow/backend:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Executing remote ssh commands using ssh key
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
          export $(xargs < .env)
          docker stop vacinow-backend -t 0 || true
          docker container prune -f
          docker image prune -af
          docker pull vacinow/backend:latest
          docker run --env-file ~/.backend.env --name vacinow-backend --restart unless-stopped -p 8000:8000 -d vacinow/backend:latest
          

    